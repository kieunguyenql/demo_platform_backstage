apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# Template metadata. Describe what this template does.
metadata:
  name: Demo-lambda-deployment
  title: Create and Deploy Lambda to AWS
  description: Build infras then deploy lambda to AWS
spec:
  # Who owns this template.
  owner: user:guest
  # The type of service this template deploys
  type: service
  # User-input parameters, which make templates dynamic
  parameters:
    # Ask the user to input some basic app details
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: App Name
          type: string
          description: Unique name for your app
          ui:autofocus: true  # This field gets auto-focused in UI
          ui:options:
            rows: 2  # Number of rows in the input area
    # Where to store project
    - title: Choose a Repo location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker  # A special UI component for selecting repo URLs
          ui:options:
            allowedHosts:
              - github.com
  # Parameters for setting up infras
    - title: Infras configuration
      required:
        - function_name
        - dynamodb_partition_key
        - apigw_stage_name
        - region
        - action
      properties:
        function_name:
          title: FunctionName
          type: string
          description: The name of your lambda function
          ui:autofocus: true
        dynamodb_partition_key:
          title: DynamoTable Partition key
          type: string
          description: The name of partition key in dynamotable 
          ui:autofocus: true
        apigw_stage_name:
          title: Stage of API gateway
          type: string
          description: The name of stage(env) of API gateway
          ui:autofocus: true
        region:
          title: AWS Region
          type: string
          description: The AWS region where the lambda will be deployed
          enum:
            - ap-southeast-2
        action:
          title: Terraform action
          type: string
          description: Action to perform (apply/destroy)
          enum:
            - apply
  # Steps that the template will execute in order
  steps:
    # Fetch the base template
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./repo_template  # Where the base content is stored
        values:
          name: ${{ parameters.name }}
    # Publish the code to a GitHub repo
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
    # Trigger a GitLab CI/CD pipeline to set up Lambdas
    - id: github-action
      name: Trigger GitHub Action
      action: github:actions:dispatch
      input:
        workflowId: dispatch_build.yml  # GitHub Action workflow ID
        repoUrl: 'github.com?repo=initial-repo&owner=kieunguyenql'
        branchOrTagName: 'main'  # The branch to run this action on
        workflowInputs:
          packagename: ${{ parameters.function_name }}
          function_name: ${{ parameters.function_name }}
          dynamodb_partition_key: ${{ parameters.dynamodb_partition_key }}
          apigw_stage_name: ${{ parameters.apigw_stage_name }}

    # Register the new component in the Backstage catalog
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'  # Where the catalog info is stored
  # Output links to the user after the template execution
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
